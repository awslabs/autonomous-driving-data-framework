name: Static Checking

on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["main"]
  pull_request:
    branches: ["main", "release/*", "stable"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  modules-analysis-rosbag-scene-detection:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/analysis/rosbag-scene-detection/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/analysis/rosbag-scene-detection/ --skip-static-checks
      - name: PyTest based Unit Tests
        run: cd modules/analysis/rosbag-scene-detection/ && pytest

  modules-analysis-rosbag-image-pipeline:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/analysis/rosbag-image-pipeline/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/analysis/rosbag-image-pipeline/ --skip-static-checks
      - name: PyTest based Unit Tests
        run: cd modules/analysis/rosbag-image-pipeline/ && pytest

  modules-sensor-ros-png:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/sensor-extraction/ros-to-png/requirements.txt
          pip install -r modules/sensor-extraction/ros-to-png/requirements-dev.txt
      - name: ros-to-png static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/sensor-extraction/ros-to-png/
      - name: PyTest based Unit Tests
        run: cd modules/sensor-extraction/ros-to-png/ && pytest

  modules-sensor-ros-parquet:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/sensor-extraction/ros-to-parquet/requirements.txt
          pip install -r modules/sensor-extraction/ros-to-parquet/requirements-dev.txt
      - name: ros-to-parquet static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/sensor-extraction/ros-to-parquet/ --skip-static-checks
      - name: PyTest based Unit Tests
        run: cd modules/sensor-extraction/ros-to-parquet/ && pytest


  modules-object-detection-yolo:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/post-processing/yolo-object-detection/requirements.txt
      - name: ros-to-parquet static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/post-processing/yolo-object-detection/
      - name: PyTest based Unit Tests
        run: cd modules/post-processing/yolo-object-detection/ && pytest


  modules-lane-detection:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/post-processing/lane-detection/requirements.txt
      - name: lane detection image static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/post-processing/lane-detection/
      - name: PyTest based Unit Tests
        run: cd modules/post-processing/lane-detection/ && pytest

  modules-yolop-lane-detection:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/post-processing/yolop-lane-detection/requirements.txt
      - name: lane detection image static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/post-processing/yolop-lane-detection/
      - name: PyTest based Unit Tests
        run: cd modules/post-processing/yolop-lane-detection/ && pytest

  modules-core-emr-on-eks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/core/emr-on-eks/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/core/emr-on-eks/ --skip-static-checks
      - name: PyTest based Unit Tests
        run: cd modules/core/emr-on-eks/ && pytest
      
  modules-example-eventbridge-stepfunc-awsbatch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/examples/eb-sf-batch/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/examples/eb-sf-batch/ --skip-static-checks
      - name: PyTest based Unit Tests
        run: cd modules/examples/eb-sf-batch/ && pytest

  modules-example-example-spark-dags:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/examples/example-spark-dags/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/examples/example-spark-dags/ --skip-static-checks
      - name: PyTest based Unit Tests
        run: cd modules/examples/example-spark-dags/ && pytest

  modules-analysis-aws-batch-demo:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/analysis/aws-batch-demo/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/analysis/aws-batch-demo/
      - name: PyTest based Unit Tests
        run: cd modules/analysis/aws-batch-demo/ && pytest

  modules-core-metadata-storage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/core/metadata-storage/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/core/metadata-storage/
      - name: PyTest based Unit Tests
        run: cd modules/core/metadata-storage/ && pytest

  modules-integration-ddb-to-opensearch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/integration/ddb-to-opensearch/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/integration/ddb-to-opensearch/
      - name: PyTest based Unit Tests
        run: cd modules/integration/ddb-to-opensearch/ && pytest

  modules-integration-eks-to-opensearch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/integration/eks-to-opensearch/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/integration/eks-to-opensearch/
      - name: PyTest based Unit Tests
        run: cd modules/integration/eks-to-opensearch/ && pytest

  modules-integration-emr-to-opensearch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/integration/emr-to-opensearch/ --skip-static-checks
      - name: PyTest based Unit Tests
        run: cd modules/integration/emr-to-opensearch/ && pytest

  modules-integration-opensearch-tunnel:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r modules/integration/opensearch-tunnel/requirements.txt
          pip install -r requirements-dev.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/integration/opensearch-tunnel/ --skip-static-checks
      - name: PyTest based Unit Tests
        run: cd modules/integration/opensearch-tunnel/ && pytest

  modules-optionals-datalake-buckets:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/optionals/datalake-buckets/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/optionals/datalake-buckets/
      - name: PyTest based Unit Tests
        run: cd modules/optionals/datalake-buckets/ && pytest

  modules-simulations-batch-managed:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/simulations/batch-managed/ --skip-static-checks
      - name: PyTest based Unit Tests
        run: cd modules/simulations/batch-managed/ && pytest

  modules-simulations-k8s-managed:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/simulations/k8s-managed/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/simulations/k8s-managed/
      - name: PyTest based Unit Tests
        run: cd modules/simulations/k8s-managed/ && pytest

  modules-visualization-dev-instance:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/visualization/dev-instance/ --skip-static-checks
      - name: PyTest based Unit Tests
        run: cd modules/visualization/dev-instance/ && pytest

  modules-integration-efs-on-eks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/integration/efs-on-eks/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/integration/efs-on-eks/ --skip-static-checks
      - name: PyTest based Unit Tests
        run: cd modules/integration/efs-on-eks/ && pytest

  modules-integration-fsx-lustre-on-eks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/integration/fsx-lustre-on-eks/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/integration/fsx-lustre-on-eks/
      - name: PyTest based Unit Tests
        run: cd modules/integration/fsx-lustre-on-eks/ && pytest

  modules-mlops-kubeflow-platform:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r  modules/mlops/kubeflow-platform/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path   modules/mlops/kubeflow-platform/
      - name: PyTest based Unit Tests
        run: cd modules/mlops/kubeflow-platform/ && pytest

  modules-mlops-kubeflow-users:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r  modules/mlops/kubeflow-users/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path   modules/mlops/kubeflow-users/
      - name: PyTest based Unit Tests
        run: cd  modules/mlops/kubeflow-users/ && pytest

  modules-workbench-cloud9:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/workbench/cloud9/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/workbench/cloud9/
      - name: PyTest based Unit Tests
        run: cd  modules/workbench/cloud9/ && pytest

  modules-sagemaker-sagemaker-studio:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/sagemaker/sagemaker-studio/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/sagemaker/sagemaker-studio/
      - name: PyTest based Unit Tests
        run: cd modules/sagemaker/sagemaker-studio/ && pytest

  modules-sagemaker-custom-kernel:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/sagemaker/custom-kernel/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/sagemaker/custom-kernel/
      - name: PyTest based Unit Tests
        run: cd modules/sagemaker/custom-kernel/ && pytest

  modules-optionals-ecr:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/optionals/ecr/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/optionals/ecr/
      - name: PyTest based Unit Tests
        run: cd modules/optionals/ecr/ && pytest

  modules-service-catalog:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/service-catalog/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/service-catalog/
