name: Static Checking

on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main", "release/*", "stable" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  modules-analysis-rosbag-scene-detection:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/analysis/rosbag-scene-detection/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/analysis/rosbag-scene-detection/ --skip-static-checks

  modules-analysis-rosbag-image-pipeline:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/analysis/rosbag-image-pipeline/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/analysis/rosbag-image-pipeline/ --skip-static-checks

  modules-ros-sensor-extraction:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: ros-to-parquet static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/sensor-extraction/ros-to-parquet/ --skip-static-checks
      - name: ros-to-png static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/sensor-extraction/ros-to-png/ --skip-static-checks

  modules-object-detection-yolo:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r modules/post-processing/yolo-object-detection/requirements-dev.txt
          pip install -r modules/post-processing/yolo-object-detection/requirements.txt
      - name: ros-to-parquet static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/post-processing/yolo-object-detection/

  modules-lane-detection:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r modules/post-processing/lane-detection/requirements-dev.txt
          pip install -r modules/post-processing/lane-detection/requirements.txt
      - name: lane detection image static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/post-processing/lane-detection/

  modules-yolop-lane-detection:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r modules/post-processing/yolop-lane-detection/requirements-dev.txt
          pip install -r modules/post-processing/yolop-lane-detection/requirements.txt
      - name: lane detection image static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/post-processing/yolop-lane-detection/

  modules-core-eks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/core/eks/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/core/eks/ --skip-static-checks

  modules-core-emr-on-eks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/core/emr-on-eks/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/core/emr-on-eks/ --skip-static-checks
  
  modules-core-aws-batch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/core/aws-batch/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/core/aws-batch/

  modules-example-eventbridge-stepfunc-awsbatch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/examples/eb-sf-batch/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/examples/eb-sf-batch/ --skip-static-checks

  modules-example-example-spark-dags:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/examples/example-spark-dags/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/examples/example-spark-dags/ --skip-static-checks
  
  modules-analysis-aws-batch-demo:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/analysis/aws-batch-demo/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/analysis/aws-batch-demo/

  modules-core-metadata-storage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/core/metadata-storage/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/core/metadata-storage/

  modules-core-mwaa:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/core/mwaa/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/core/mwaa/

  modules-core-neptune:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/core/neptune/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/core/neptune/

  modules-core-opensearch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/core/opensearch/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/core/opensearch/

  modules-integration-ddb-to-opensearch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/integration/ddb-to-opensearch/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/integration/ddb-to-opensearch/

  modules-integration-eks-to-opensearch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/integration/eks-to-opensearch/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/integration/eks-to-opensearch/

  modules-integration-emr-to-opensearch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/integration/emr-to-opensearch/ --skip-static-checks

  modules-optionals-datalake-buckets:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/optionals/datalake-buckets/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/optionals/datalake-buckets/

  modules-optionals-networking:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/optionals/networking/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/optionals/networking/

  modules-simulations-batch-managed:
      runs-on: ubuntu-latest
      strategy:
        matrix:
          python-version: [3.9]
      steps:
        - uses: actions/checkout@v2
        - name: Set up Python ${{ matrix.python-version }}
          uses: actions/setup-python@v1
          with:
            python-version: ${{ matrix.python-version }}
        - name: Install Requirements
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements-dev.txt
        - name: Static checks and linting (mypy, flake8, black, isort)
          run: scripts/validate.sh --language python --path modules/simulations/batch-managed/ --skip-static-checks

  modules-simulations-k8s-managed:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/simulations/k8s-managed/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/simulations/k8s-managed/

  modules-visualization-dev-instance:
      runs-on: ubuntu-latest
      strategy:
        matrix:
          python-version: [3.9]
      steps:
        - uses: actions/checkout@v2
        - name: Set up Python ${{ matrix.python-version }}
          uses: actions/setup-python@v1
          with:
            python-version: ${{ matrix.python-version }}
        - name: Install Requirements
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements-dev.txt
        - name: Static checks and linting (mypy, flake8, black, isort)
          run: scripts/validate.sh --language python --path modules/visualization/dev-instance/ --skip-static-checks

  modules-core-efs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/core/efs/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/core/efs/ --skip-static-checks

  modules-integration-efs-on-eks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/integration/efs-on-eks/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/integration/efs-on-eks/ --skip-static-checks

  modules-integration-fsx-lustre-on-eks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/integration/fsx-lustre-on-eks/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/integration/fsx-lustre-on-eks/

  modules-mlops-kubeflow-platform:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r  modules/mlops/kubeflow-platform/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path   modules/mlops/kubeflow-platform/
  
  modules-mlops-kubeflow-users:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r  modules/mlops/kubeflow-users/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path   modules/mlops/kubeflow-users/

  modules-workbench-cloud9:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/workbench/cloud9/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/workbench/cloud9/

  modules-core-fsx-lustre:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r modules/core/fsx-lustre/requirements.txt
      - name: Static checks and linting (mypy, flake8, black, isort)
        run: scripts/validate.sh --language python --path modules/core/fsx-lustre/
